generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client" // هذا هو المسار الافتراضي
  url      = env("DATABASE_URL")
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  role             Role              @default(warehouse)
  username         String            @unique
  password         String
  purchaseInvoices PurchaseInvoice[]
  salesInvoices    SalesInvoice[]
}

enum Role {
  admin
  warehouse
  maintenance
}

model Supplier {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  purchases PurchaseInvoice[]
}

model Buyer {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  purchases PurchaseInvoice[]
}

model repairMan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  nationalId   String?
  workshopName String?
  sales        SalesInvoice[]
}

model bolRepairMan {
  id    String         @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  sales SalesInvoice[]
}

model Vehicle {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  Government_number String               @unique
  royal_number      String?                
  receivingParty    ReceivingParty?
  shape             String?
  model             String?
  address           String?
  date              DateTime?
  Chassis_number    String?
  Engine_number     String?
  workOrders        WorkOrder[]
  work_kind         WorkKind
  reservedBatches   ProductBatch[]
  sales             SalesInvoice[]
  purchaseItems     PurchaseInvoiceItem[]
}

model WorkOrder {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  File_number        String?
  Type_of_repair     String?
  number_work        String?
  date_number_work   DateTime?
  file_number_work   FileType?
  file_number_work_path String?        // مسار ملف أمر الشغل
  examination_status ExaminationStatus? @default(Not_checked)
  examination_date   DateTime?
  file_examination   FileType?
  file_examination_path String?        // مسار ملف الفحص
  price_work         Float?
  Checkstatus        CheckStatus?       @default(Not_Withdrawn)
  Check_number       String?
  Check_date         DateTime?
  file_check         FileType?
  file_check_path    String?           // مسار ملف الشيك
  Electronic_invoice_status ElectronicInvoiceStatus? @default(Not_Done)
  Electronic_invoice_date DateTime?
  Electronic_invoice_number String?
  file_electronic_invoice  FileType?
  file_electronic_invoice_path String? // مسار ملف الفاتورة الإلكترونية

  vehicle            Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleId          String             @db.ObjectId
  salesInvoices      SalesInvoice[]
}

enum ExaminationStatus {
  Checked
  Not_checked
}

enum ElectronicInvoiceStatus {
  Done
  Not_Done
}

enum CheckStatus {
  Withdrawn
  Not_Withdrawn
  Withdrawn_in_progress
}

model Product {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  barcode        String                @unique
  name           String
  category       Categories
  unit           Units
  receivingParty ReceivingParty
  batches        ProductBatch[]
  purchaseItems  PurchaseInvoiceItem[] @relation("ProductToPurchaseItems")
  salesItems     SalesInvoiceItem[]
}

enum Categories {
  sparePart
  rawMaterials
  meter
  doku
  liquids
  oil
  oilOffice
}

enum Units {
  kilo
  box
  piece
  liter
  gram
  meter
  reel
}

model PurchaseInvoice {
  id         String                @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  supplier   Supplier              @relation(fields: [supplierId], references: [id])
  supplierId String                @db.ObjectId
  items      PurchaseInvoiceItem[]
  user       User                  @relation(fields: [userId], references: [id])
  userId     String                @db.ObjectId
  Buyer      Buyer?                @relation(fields: [buyerId], references: [id])
  buyerId    String?               @db.ObjectId
}

model PurchaseInvoiceItem {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id])
  purchaseInvoiceId String          @db.ObjectId
  product           Product         @relation("ProductToPurchaseItems", fields: [productId], references: [id])
  productId         String          @db.ObjectId
  quantity          Int
  purchasePrice     Float
  isReserved        Boolean         @default(false)
  vehicle           Vehicle?        @relation(fields: [vehicleId], references: [id])
  vehicleId         String?         @db.ObjectId
  batch             ProductBatch?   @relation("BatchToPurchaseItem")
  batchId           String?         @db.ObjectId
  isDelivered       Boolean?        @default(false)
  deliveryDate      DateTime? // يمكن أن تكون فارغة (null) قبل التسليم
}

model ProductBatch {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  product        Product              @relation(fields: [productId], references: [id])
  productId      String               @db.ObjectId
  quantity       Int
  soldQuantity   Int                  @default(0)
  batchNumber    String?
  purchaseItem   PurchaseInvoiceItem? @relation("BatchToPurchaseItem", fields: [purchaseItemId], references: [id])
  purchaseItemId String?              @unique @db.ObjectId
  vehicle        Vehicle?             @relation(fields: [vehicleId], references: [id])
  vehicleId      String?              @db.ObjectId
  price          Float?
  salesItems     SalesInvoiceItem[]
}

model SalesInvoice {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  number             String?
  date               DateTime
  vehicle            Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleId          String             @db.ObjectId
  totalAmount        Float
  items              SalesInvoiceItem[]
  repairMan          repairMan?         @relation(fields: [repairManId], references: [id])
  repairManId        String?            @db.ObjectId
  bolRepairMan       bolRepairMan?      @relation(fields: [bolRepairManId], references: [id])
  bolRepairManId     String?            @db.ObjectId
  workOrder          WorkOrder?         @relation(fields: [workOrderId], references: [id])
  workOrderId        String?            @db.ObjectId
  disbursementStatus Status1            @default(NotDisbursed)
  approvalStatus     Status2            @default(Notapproved)
  user               User               @relation(fields: [userId], references: [id])
  userId             String             @db.ObjectId
  createdBy          Role?              @default(maintenance)
}

model SalesInvoiceItem {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  salesInvoice      SalesInvoice @relation(fields: [salesInvoiceId], references: [id])
  salesInvoiceId    String       @db.ObjectId
  batch             ProductBatch @relation(fields: [batchId], references: [id])
  batchId           String       @db.ObjectId
  soldQuantity      Int
  unitPrice         Float
  availableQuantity Int          @default(0)
  product           Product      @relation(fields: [productId], references: [id])
  productId         String       @db.ObjectId
  vehicleId         String?      @db.ObjectId
}

enum Status1 {
  Disbursed
  NotDisbursed
}

enum Status2 {
  Approved
  Notapproved
}

enum ReceivingParty {
  vehiclesDepartment
  thirdParties
  campaignWithJobOrder
  campaignWithoutJobOrder
  boxMaterials
  warehouseReserve
  campaignMaterials
}

enum WorkKind {
  Without_a_work_order
  By_order_of_employment
}

enum FileType {
  PDF
  IMAGE
  OTHER
}
